{
  "name": "Devops-for-web-development",
  "tagline": "Code for DevOps for Web Development",
  "body": "# DevOps for Web Development\r\nThis is the code repository for [DevOps for Web Development](https://www.packtpub.com/networking-and-servers/devops-web-development?utm_source=github&utm_medium=repository&utm_content=9781786465702), published by Packt. It contains all the supporting project files necessary to work through the book from start to finish.\r\n\r\n## Instructions and Navigation\r\n\r\nAll of the code is organized into folders. Each folder starts with a number followed by the application name. For example, `Chapter 2`. \r\n\r\nCode Snippet:\r\n```\r\n <properties>\r\n        <jpa.database>MYSQL</jpa.database>\r\n        <jdbc.driverClassName>com.mysql.jdbc.Driver</jdbc.driverClassName>\r\n        <jdbc.url>jdbc:mysql://localhost:3306/petclinic?useUnicode=true</jdbc.url>\r\n        <jdbc.username>root</jdbc.username>\r\n        <jdbc.password>petclinic</jdbc.password>\r\n    </properties>\r\n```\r\n### Chapter 1:\r\nYou can find all the necessary code **[here](https://github.com/spring-projects/spring-petclinic)** for the chapter 1.\r\n\r\n### Chapter 2:\r\n\r\n```\r\njava -jar jenkins.war --httpPort=9999\r\njava -jar jenkins.war --httpsPort=8888\r\njava -jar slave.jar -jnlpUrl http://192.168.1.34:8080/computer/TestServer/slave-agent.jnlp -secret 65464e02c58c85b192883f7848ad2758408220bed2f3af715c01c9b01cb72f9b\r\n```\r\n\r\n**Sonar.properties**\r\n*Required metadata *\r\n```\r\nsonar.projectKey=java-sonar-runner-simple \r\nsonar.projectName=Simple Java project analyzed with the SonarQube Runner \r\nsonar.projectVersion=1.0\r\n```\r\n**Comma-separated paths to directories with sources (required)**\r\n`onar.sources=src`\r\n\r\n**Language**\r\n`sonar.language=java`\r\n**Encoding of the source files **\r\n`sonar.sourceEncoding=UTF-8`\r\n\r\n### Chapter 3:\r\n```\r\necho 'Hello from Pipeline Demo'\r\nstage 'Compile'\r\nbuild 'PetClinic-Compile'\r\nstage 'Test'\r\nbuild 'PetClinic-Test'\r\n```\r\n---------------\r\n\r\n```\r\necho 'Hello from Pipeline Demo'\r\nstage 'Compile'\r\nnode {\r\n  git url: 'https://github.com/mitesh51/spring-petclinic.git'\r\n  def mvnHome = tool 'Maven3.3.1'\r\n  sh \"${mvnHome}/bin/mvn -B compile\"\r\n}\r\nstage 'Test'\r\nnode('WindowsNode') {\r\n  git url: 'https://github.com/mitesh51/spring-petclinic.git'\r\n  def mvnHome = tool 'WindowsMaven'\r\n  bat \"${mvnHome}\\\\bin\\\\mvn -B verify\"\r\n  step([$class: 'ArtifactArchiver', artifacts: '**/target/*.war', fingerprint: true])  \r\n  step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])\r\n}\r\n```\r\n----------------\r\n```\r\nCreate a user with name admin and assign password and roles as below. \r\n<role rolename=\"manager-gui\"/>\r\n<role rolename=\"manager-script\"/>\r\n<user username=\"admin\" password=\"cloud@123\" roles=\"manager-script\" />\r\nNow, we need to add Tomcat's admin user that we created in the Maven setting file.\r\n<servers>\r\n<server>\r\n  <id>tomcat-development-server</id>\r\n  <username>admin</username>\r\n  <password>password</password>\r\n</server>\r\n</servers>\r\n```\r\n-----------------\r\n\r\nFind *Tomcat* Plugin block in `Pom.xml` and add following details. Make sure that **Server Name** is same that we provided in `settings.xml` of Maven as **Id**:\r\n```\r\n<plugin>\r\n                <groupId>org.apache.tomcat.maven</groupId>\r\n                <artifactId>tomcat7-maven-plugin</artifactId>\r\n                <version>2.2</version>\r\n                <configuration>\r\n                    <server>tomcat-development-server</server>\r\n\t\t\t<url>http://192.168.1.35:9999/manager/text</url>\r\n\t\t\t<warFile>target\\petclinic.war</warFile>\r\n\t\t\t<path>/petclinic</path>\r\n                </configuration>\r\n </plugin>\r\n```\r\n\r\n### Chapter 4:\r\n```\r\nrpm -ivh chef-12.9.41-1.el6.x86_64.rpm \r\nknife bootstrap 192.168.1.37 -x root -P cloud@123 -N tomcatserver\r\nknife node run_list add tomcatserver\"role[vtomcat]\"\r\n```\r\n\r\n### Chapter 5:\r\n`docker run -p 8180:8080 -d --name devopstomcat1devopstomcatnew`\r\n\r\n### Chapter 6:\r\n```\r\nknife ec2 server create -I ami-1ecae776 -f t2.micro -N DevOpsVMonAWS --aws-access-key-id '< Your Access Key ID >' --aws-secret-access-key '< Your Secret Access Key >' -S book --identity-file book.pem --ssh-user ec2-user -r role[v-tomcat]\r\n```\r\n--------------\r\n```\r\nknife azure server create --azure-dns-name 'distechnodemo' --azure-vm-name 'dtserver02' --azure-vm-size 'Small' -N DevOpsVMonAzure2 --azure-storage-account 'classicstorage9883' --bootstrap-protocol 'cloud-api' --azure-source-image '5112500ae3b842c8b9c604889f8753c3__OpenLogic-CentOS-67-20160310' --azure-service-location 'Central US' --ssh-user 'dtechno' --ssh-password 'cloud@321' -r role[v-tomcat] --ssh-port 22\r\n```\r\n\r\n### Chapter 7:\r\n***FROM tomcat:8.0***\r\n\r\n**MAINTAINER** ``` Mitesh<YourEmailID@domain.com>```\r\n\r\n**COPY**  ```tomcat-users.xml /usr/local/tomcat/conf/tomcat-users.xml```\r\n\r\n### Chapter 8:\r\n`java -jar newrelic.jar install`\r\n\r\n### Chapter 9:\r\n\r\n```\r\nssh -t -t root@192.168.1.36 \"ifconfig; rvm use 2.1.0; knife ec2 server create -I ami-1ecae776 -f t2.micro -N DevOpsVMonAWS1 --aws-access-key-id '<YOUR ACCESS KEY ID>' --aws-secret-access-key '<YOUR SECRET ACCESS KEY>' -S book --identity-file book.pem --ssh-user ec2-user -r role[v-tomcat]\"\r\n```\r\n\r\n-----------\r\n```\r\nssh -t -t root@192.168.1.36 \"ifconfig; rvm use 2.1.0; knife ec2 server create -I ami-1ecae776 -f t2.micro -N DevOpsVMonAWS1 --aws-access-key-id '<YOUR ACCESS KEY ID>' --aws-secret-access-key '<YOUR SECRET ACCESS KEY>' -S book --identity-file book.pem --ssh-user ec2-user -r role[v-tomcat]\"\r\n```\r\n-----------\r\n```\r\njava -jar slave.jar -jnlpUrl http://192.168.1.35:8080/computer/TestServer/slave-agent.jnlp -secret 65464e02c58c85b192883f7848ad2758408220bed2f3af715c01c9b01cb72f9b\r\n```\r\n-----------\r\n```\r\nssh  -i /home/mitesh/book.pem -o StrictHostKeyChecking=no -t -t ec2-user@ec2-52-90-116-36.compute-1.amazonaws.com \"sudo usermod -a -G tomcat ec2-user; sudo chmod -R g+w /var/lib/tomcat6/webapps; sudo service tomcat6 stop;\" \r\nscp  -i /home/mitesh/book.pem /home/mitesh/target/*.war ec2-user@ec2-52-90-116-36.compute-1.amazonaws.com:/var/lib/tomcat6/webapps\r\nssh  -i /home/mitesh/book.pem -o StrictHostKeyChecking=no -t -t ec2-user@ec2-52-90-116-36.compute-1.amazonaws.com \"sudo service tomcat6 start\"\r\n```\r\n-----------\r\n```\r\nnode('Master') {\r\n   // Mark the code checkout 'stage'\r\n   stage 'Checkout'\r\n\r\n   // Get code for PetClinic Application from a GitHub repository\r\n   git url: 'https://github.com/mitesh51/spring-petclinic.git'\r\n\r\n   // Get the maven tool.\r\n   // This ' Maven3.3.1' maven tool must be configured in the global  configuration.           \r\n   def mvnHome = tool 'Maven3.3.1'\r\n\r\n   // Mark the code Compile 'stage'....\r\n   stage 'Compile'\r\n   // Run the maven build\r\n   sh \"${mvnHome}/bin/mvn clean compile\"\r\n\r\n   // Mark the code for Unit test execution and package 'stage'....\r\n   stage 'Test&Package'\r\n   sh \"${mvnHome}/bin/mvn clean package\"\r\n\r\n   // Mark the code Cloud provisioning 'stage' where instance is allocated in Amazon EC2\r\n// Once Instance is available, Chef will be used for Configuration Management\r\n// knife ec2 plugin will be used for instance provisioning in the AWS cloud\r\n   stage 'Cloud Provisioning'\r\n   sh \"ssh -t -t root@192.168.1.39 'ifconfig; rvm use 2.1.0; knife ec2 server create -I ami-1ecae776 -f t2.micro -N DevOpsVMonAWS9 --aws-access-key-id xxxxxxxxxxxxxxxxxxxx --aws-secret-access-key xxxxxxxxxxxxxxxxxxxxxxxxxxxxx -S book --identity-file book.pem --ssh-user ec2-user -r role[v-tomcat]'\"\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}